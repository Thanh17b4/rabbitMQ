// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/Thanh17b4/practice/model"
	mock "github.com/stretchr/testify/mock"
)

// OtpRepo is an autogenerated mock type for the OtpRepo type
type OtpRepo struct {
	mock.Mock
}

// CreatOTP provides a mock function with given fields: otp
func (_m *OtpRepo) CreatOTP(otp *model.UserOTP) (*model.UserOTP, error) {
	ret := _m.Called(otp)

	var r0 *model.UserOTP
	if rf, ok := ret.Get(0).(func(*model.UserOTP) *model.UserOTP); ok {
		r0 = rf(otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserOTP)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.UserOTP) error); ok {
		r1 = rf(otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserOTP provides a mock function with given fields: userID
func (_m *OtpRepo) GetUserOTP(userID int) (*model.UserOTP, error) {
	ret := _m.Called(userID)

	var r0 *model.UserOTP
	if rf, ok := ret.Get(0).(func(int) *model.UserOTP); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserOTP)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOtpRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewOtpRepo creates a new instance of OtpRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOtpRepo(t mockConstructorTestingTNewOtpRepo) *OtpRepo {
	mock := &OtpRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
